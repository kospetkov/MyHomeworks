$(document).ready(function () {

    new scrollHandler();
});

let scrollHandler = function () {
    this.footer = document.getElementsByTagName('footer');
    this.heightFooter = this.footer[0].clientHeight;
    this.setClassList();
    this.arrayDataPages = [];
    this.$mainParent = $('.' + this.mainParentName); // зачем $mainParent jquery object если ты не работаешь с ним как с jquery object?
    this.pageDataHandler();
    this.currentUrl = this.arrayDataPages[0].url;
    this.setLocation();
    this.scrollInit();
};

scrollHandler.prototype.pageDataHandler = function () {
    this.length = this.arrayDataPages.length;
    this.arrayDataPages.push({
        url: this.$mainParent[0].attributes.data.value,
        topPoint: this.$mainParent[0].offsetTop,
        bottomPoint: this.$mainParent[0].offsetTop + this.$mainParent[0].clientHeight,
        id: function () {
            return this.length > 0 ? this.length : 0;
        }.bind(this)(),
        height: function () {
            return this.bottomPoint - this.topPoint;
        }
    });
    this.updateBottomPoint(); // функция updateBottomPoint используется ровно один раз - зачем эту строчку пихать в функцию?

    /*for (let item of this.arrayDataPages) {
        console.log('top => ' + item.topPoint + ' <=> bottom => ' + item.bottomPoint); // закоменченное логирование
    }*/
};

scrollHandler.prototype.updateBottomPoint = function () {
    if (this.length > 0) {
        this.arrayDataPages[this.length - 1].bottomPoint = this.$mainParent[0].offsetTop - 1;
    }
};

scrollHandler.prototype.setClassList = function () {
    this.mainParentName = 'content';
    this.fixedTop = 'fixed_for_load_top';
    this.fixedBottom = 'fixed_for_load_bottom';
    this.blackBottom = 'blackout_bottom';
    this.blackTop = 'blackout_top';
    this.stickyBox = 'sticky-box';
};

scrollHandler.prototype.scrollInit = function () {
    this.inProgress = false;
    this.count = 1;          //
    if (this.count >= 5) {   // это даже круче чем if (a < 10 && a > 20)
        this.count = 1;      //
    }

    document.addEventListener('scroll', function () {
        this.windowHeight = window.innerHeight;                         //
        this.scrollHeight = window.pageYOffset;                         //
        this.windowTopPoint = this.scrollHeight;                        // возможно функция - calculateЧегоТоТам
        this.bodyHeight = document.body.clientHeight;                   //
        this.windowBottomPoint = this.scrollHeight + this.windowHeight; //

        // эта вся логика точно чувствовала бы себя уютнее в какой то функции (а может и в нескольких)
        if (this.blackoutTop() && ((this.windowTopPoint > (this.currentPageData().topPoint + 100)))) { // было бы хорошо, такие колбасы в ифах запихивать в булевы переменные. Что бы было ясно что это за условие
            $('.' + this.fixedTop).removeClass(this.fixedTop); // все время дергаешь dom. зачем? заеинул нужный элемент в переменную, и работаешь с ней.
            this.blackoutTop().remove();
        }

        if (this.blackoutBottom() && (this.windowBottomPoint < (this.currentPageData().bottomPoint - 100))) {
            $('.' + this.fixedBottom).removeClass(this.fixedBottom);
            this.blackoutBottom().remove();
        }

        if (!this.blackoutTop() && !this.blackoutBottom()) {

            if (this.nextPageData() && (this.windowBottomPoint >= (this.currentPageData().bottomPoint - 100))
                && (this.windowBottomPoint < this.currentPageData().bottomPoint)) {
                this.$nextPage = $('[data="' + this.nextPageData().url + '"]');
                $($('<div>', {'class': this.blackBottom})).insertAfter(this.$nextPage);
                $('.' + this.blackBottom).css({'height': this.nextPageData().height() + 'px'});
                this.$nextPage.addClass(this.fixedBottom);
                this.$nextPage.find('.' + this.stickyBox).css({'position': 'initial'});
            }

            if (this.previosPageData() && ((this.windowTopPoint <= (this.currentPageData().topPoint + 100))
                && (this.windowTopPoint > this.currentPageData().topPoint))) {
                this.$previosPage = $('[data="' + this.previosPageData().url + '"]');
                this.$previosPage.addClass(this.fixedTop);
                $(this.$previosPage).before($('<div>', {'class': this.blackTop}));
                $('.' + this.blackTop).css({'height': this.previosPageData().height() + 'px'});
                this.$previosPage.css({'height': this.previosPageData().height() + 'px'});
            }
        }

        this.blackoutBottomControl();
        this.blackoutTopControl();
        if (!this.inProgress && ((this.windowHeight + this.windowTopPoint) >= (this.bodyHeight - this.heightFooter - this.windowHeight))) {
            this.loadNewPage();
        }

    }.bind(this));
};

scrollHandler.prototype.loadNewPage = function () {
    this.inProgress = true;
    $.ajax({
        type: 'POST',
        url: 'js/item_' + this.count + '.php',
        context: this,
        success: function (ressponse) {
            if ((ressponse.status === 'success') && this.inProgress) {
                this.data = $(ressponse.html);
                $(this.footer).before(this.data);
                this.$mainParent = this.data;
                this.pageDataHandler();
                addStickyElement(this.data);
                initializeScripts(this.data);
                setTimeout(function () {
                    this.inProgress = false;
                    this.count++;
                }.bind(this), 2000);
            }
        },
        error: function (xhr, status) {
            console.log('ajaxError xhr:' + xhr.statusCode());
            console.log('ajaxError status:' + status);
        }
    });
};

// зачем эти две функции?? if($('.' + this.blackBottom).length) - и все!
scrollHandler.prototype.blackoutBottom = function () {
    return $('.' + this.blackBottom).length > 0 ? $('.' + this.blackBottom) : false;
};

scrollHandler.prototype.blackoutTop = function () {
    return $('.' + this.blackTop).length > 0 ? $('.' + this.blackTop) : false;
};

// почему это функции а не поля?
scrollHandler.prototype.nextPageData = function () {
    return this.currentPageData().id + 1 < this.arrayDataPages.length ? this.arrayDataPages[this.currentPageData().id + 1] : null;
};
// почему это функции а не поля?
scrollHandler.prototype.previosPageData = function () {
    return this.currentPageData().id > 0 ? this.arrayDataPages[this.currentPageData().id - 1] : null;
};

scrollHandler.prototype.hashUrl = function () {
    return window.location.pathname.split('/')[window.location.pathname.split('/').length - 1];
};

scrollHandler.prototype.currentPageData = function () {
    for (let item of this.arrayDataPages) {

        if (item.url === this.hashUrl()) {
            return item;
        }
    }
};

scrollHandler.prototype.blackoutBottomControl = function () {
    if (this.blackoutBottom() && (this.windowBottomPoint >= this.currentPageData().bottomPoint)) {
        this.coef = Math.abs(this.windowTopPoint - this.currentPageData().bottomPoint) / 1000;
        this.blackoutBottom().css({'background-color': 'rgba(0, 0, 0, ' + this.coef + ')'});

        if (this.windowTopPoint >= this.currentPageData().bottomPoint) {
            this.blackoutBottomRemove();
            $('[data="' + this.nextPageData().url + '"]').find('.' + this.stickyBox).css({'position': ''}).removeClass('sticky-bottom');
            this.currentUrl = this.nextPageData().url;
            this.setLocation();
        }
    }
};

scrollHandler.prototype.blackoutTopControl = function () {
    if (this.blackoutTop() && (this.windowTopPoint <= this.currentPageData().topPoint)) {
        this.coef = Math.abs(this.windowBottomPoint - this.currentPageData().topPoint) / 1000;
        this.blackoutTop().css({'background-color': 'rgba(0, 0, 0, ' + this.coef + ')'});

        if (this.currentPageData().topPoint >= this.windowBottomPoint) {
            this.blackoutTopRemove();
            this.currentUrl = this.previosPageData().url;
            this.setLocation();
        }
    }
};

scrollHandler.prototype.blackoutBottomRemove = function () {
    $('.' + this.fixedBottom).removeClass(this.fixedBottom);
    this.blackoutBottom().remove();
};

scrollHandler.prototype.blackoutTopRemove = function () {
    $('.' + this.fixedTop).removeClass(this.fixedTop);
    this.blackoutTop().remove();
};


scrollHandler.prototype.setLocation = function () { // setLocation - назвение не совсем подходящее
    try {
        history.pushState(null, null, this.currentUrl);
        return;
    } catch (e) {
    }

    location.hash = '#' + this.currentUrl;
};




